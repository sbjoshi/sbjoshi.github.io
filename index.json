[{"authors":["admin"],"categories":null,"content":"I am an Assistant Professor with the Department of CSE at IIT Hyderabad.\n","date":1609459200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1609459200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://sbjoshi.github.io/starter-academic/author/saurabh-joshi/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/starter-academic/author/saurabh-joshi/","section":"authors","summary":"I am an Assistant Professor with the Department of CSE at IIT Hyderabad.","tags":null,"title":"Saurabh Joshi","type":"authors"},{"authors":["Saurabh Joshi","Gautam Muduganti"],"categories":null,"content":"","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"dc2e8f39e9f55297c3c27b52b379ea34","permalink":"https://sbjoshi.github.io/starter-academic/publication/gpurepair-vmcai21/","publishdate":"2020-10-10T00:00:00Z","relpermalink":"/starter-academic/publication/gpurepair-vmcai21/","section":"publication","summary":"This paper presents a tool and a technique to fix data-race and barrier divergence errors in CUDA and OpenCL programs.","tags":["Formal Verification"],"title":"GPURepair: Automated Repair of GPU Kernels","type":"publication"},{"authors":["Utpal Bora","Santanu Das","Pankaj Kukreja","Saurabh Joshi","Ramakrishna Upadrasta","Sanjay V Rajopadhye"],"categories":null,"content":"","date":1598918400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598918400,"objectID":"a5eb136eb2a737801309f2bcaa640c8f","permalink":"https://sbjoshi.github.io/starter-academic/publication/llov-taco20/","publishdate":"2020-10-16T00:00:00Z","relpermalink":"/starter-academic/publication/llov-taco20/","section":"publication","summary":"This paper presents a tool, LLOV, which leverages polyhedral compilation for fast data-race checking for OpenMP Programs.","tags":["Program Analysis"],"title":"LLOV: A Fast Static Data-Race Checker for OpenMP Programs","type":"publication"},{"authors":["Sriram Bhyravarapu","Saurabh Joshi","Subrahmanyam Kalyanasundaram","Anjeneya Swami Kare"],"categories":null,"content":"","date":1598918400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598918400,"objectID":"b637f3ac96c5cfa9045e75d7afc90288","permalink":"https://sbjoshi.github.io/starter-academic/publication/kicoloring/","publishdate":"2020-10-10T00:00:00Z","relpermalink":"/starter-academic/publication/kicoloring/","section":"publication","summary":"This paper is primarily about NP-completeness of $(k,i)$-coloring of graph and giving a parameterized algorithm for this problem using feedback vertex set as the parameter.","tags":["CS Theory"],"title":"On the tractability of $(k,i)$-coloring (Extended Journal Version)","type":"publication"},{"authors":["Ruben Martins","Saurabh Joshi","Vasco Manquinho","Ines Lynce"],"categories":null,"content":"","date":1570665600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570665600,"objectID":"e80504c14e255fa6b19c68668d69c382","permalink":"https://sbjoshi.github.io/starter-academic/publication/reflections-virtualvolume-cp19/","publishdate":"2020-10-16T00:00:00Z","relpermalink":"/starter-academic/publication/reflections-virtualvolume-cp19/","section":"publication","summary":"To celebrate the first 25 years of the International Conference on Principles and Practice of Constraint Programming (CP) the editors invited the authors of the most cited paper of each year to write a commentary on their paper. This report describes our reflections on the CP 2014 paper \"Incremental Cardinality Constraints for MaxSAT\" and its impact on the Maximum Satisfiability community and beyond.","tags":["Constraint Programming"],"title":"Reflections on \"Incremental Cardinality Constraints for MaxSAT\"","type":"publication"},{"authors":["Saurabh Joshi","Prateek Kumar","Sukrut Rao","Ruben Martins"],"categories":null,"content":"","date":1567296000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567296000,"objectID":"dd6170840c6d44399fe22285c7d8c920","permalink":"https://sbjoshi.github.io/starter-academic/publication/open-wbo-inc-jsat/","publishdate":"2020-10-10T00:00:00Z","relpermalink":"/starter-academic/publication/open-wbo-inc-jsat/","section":"publication","summary":"This paper presents a couple of incomplete Weighted MaxSAT solving techniques along with analysis on the deviation to the optimal value.","tags":["Constraint Programming"],"title":"Open-WBO-Inc: Approximation Strategies for Incomplete Weighted MaxSAT","type":"publication"},{"authors":["Yash Pote","Saurabh Joshi","Kuldeep Meel"],"categories":null,"content":"","date":1567296000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567296000,"objectID":"abbd28be6439d61e161fd2ce2e2ebd76","permalink":"https://sbjoshi.github.io/starter-academic/publication/phasetransition-ijcai19/","publishdate":"2020-10-10T00:00:00Z","relpermalink":"/starter-academic/publication/phasetransition-ijcai19/","section":"publication","summary":"This paper studies phase transition behaviour of CARD-XOR formulas.","tags":["Constraint Programming"],"title":"Phase Transition Behavior of Cardinality and XOR Constraints","type":"publication"},{"authors":["Eti Chaudhary","Saurabh Joshi"],"categories":null,"content":"","date":1554076800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554076800,"objectID":"f5e270bffa4c0c701f270e78c3e6dca5","permalink":"https://sbjoshi.github.io/starter-academic/publication/pinaka-tacas19/","publishdate":"2020-10-10T00:00:00Z","relpermalink":"/starter-academic/publication/pinaka-tacas19/","section":"publication","summary":"This paper describes, Pinaka, a symbolic execution engine that leverages incremental SAT solving.","tags":["Formal Verification"],"title":"Pinaka: Symbolic Execution Meets Incremental Solving - (Competition Contribution)","type":"publication"},{"authors":["Saurabh Joshi","Prateek Kumar","Ruben Martins","Sukrut Rao"],"categories":null,"content":"","date":1533081600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1533081600,"objectID":"19d838cff7fe52274041c7cd4ba305e7","permalink":"https://sbjoshi.github.io/starter-academic/publication/open-wbo-inc-cp18/","publishdate":"2020-10-15T00:00:00Z","relpermalink":"/starter-academic/publication/open-wbo-inc-cp18/","section":"publication","summary":"This paper presents a couple of incomplete Weighted MaxSAT solving techniques that allowed _Open-WBO-Inc_ to win accolades in MaxSAT evaluations 2018 and MaxSAT evaluations 2019.","tags":["Constraint Programming"],"title":"Approximation Strategies for Incomplete MaxSAT","type":"publication"},{"authors":["Saurabh Joshi","Subrahmanyam Kalyanasundaram","Anjeneya Swami Kare","B Sriram"],"categories":null,"content":"","date":1517443200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1517443200,"objectID":"e899c492ef188edc77e305fb3c8ec315","permalink":"https://sbjoshi.github.io/starter-academic/publication/kicoloring-caldam18/","publishdate":"2020-10-10T00:00:00Z","relpermalink":"/starter-academic/publication/kicoloring-caldam18/","section":"publication","summary":"This paper is primarily provides a parameterized algorithm for $(k,i)$-coloring  problem using feedback vertex set as the parameter.","tags":["CS Theory"],"title":"On the tractability of $(k,i)$-coloring","type":"publication"},{"authors":["Vojtech Forejt","Saurabh Joshi","Daniel Kroening","Ganesh Narayanaswamy","Subodh Sharma"],"categories":null,"content":"","date":1504224000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1504224000,"objectID":"d76365442507dc9925337c09a1b4c994","permalink":"https://sbjoshi.github.io/starter-academic/publication/predictiveanalysis-toplas/","publishdate":"2020-10-16T00:00:00Z","relpermalink":"/starter-academic/publication/predictiveanalysis-toplas/","section":"publication","summary":"This paper shows NP-completeness of deadlock detection in certain class of MPI programs. It also presents encoding to analyze a class of MPI programs with respect to deadlocks.","tags":["Formal Verification","Program Analysis"],"title":"Precise Predictive Analysis for Discovering Communication Deadlocks in MPI Programs","type":"publication"},{"authors":["Rajdeep Mukherjee","Saurabh Joshi","Andreas Griesmayer","Daniel Kroening","Tom Melham"],"categories":null,"content":"","date":1467331200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1467331200,"objectID":"c3ff364d50d810c081446ec3bafce5a6","permalink":"https://sbjoshi.github.io/starter-academic/publication/equivalencefpu-fm16/","publishdate":"2020-10-16T00:00:00Z","relpermalink":"/starter-academic/publication/equivalencefpu-fm16/","section":"publication","summary":"This paper describes an efficient technique for equivalence checking of a real-world Floating Point Unit.","tags":["Formal Verification"],"title":"Equivalence Checking of a Floating-Point Unit Against a High-Level C Model","type":"publication"},{"authors":["Ganesh Narayanaswamy","Saurabh Joshi","Daniel Kroening"],"categories":null,"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1451606400,"objectID":"b6a3da14e4e00062ccc1ff64e07cd278","permalink":"https://sbjoshi.github.io/starter-academic/publication/concurrency-ppoppp16/","publishdate":"2020-10-16T00:00:00Z","relpermalink":"/starter-academic/publication/concurrency-ppoppp16/","section":"publication","summary":"This paper presents a different encoding that makes Bounded Model Checking faster for concurrent programs.","tags":["Formal Verification","Program Analysis"],"title":"The virtues of conflict: analysing modern concurrency","type":"publication"},{"authors":["Ruben Martins","Saurabh Joshi","Vasco Manquinho","Ines Lynce"],"categories":null,"content":"","date":1446336000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1446336000,"objectID":"4c86d5a296855bfbb678e53b9700a8c2","permalink":"https://sbjoshi.github.io/starter-academic/publication/inc-cardinality-jsat14/","publishdate":"2020-10-15T00:00:00Z","relpermalink":"/starter-academic/publication/inc-cardinality-jsat14/","section":"publication","summary":"This paper is an extended version of the CP 2014 paper where incremental encoding is extended to weighted MaxSAT.","tags":["Constraint Programming"],"title":"On Using Incremental Encodings in Unsatisfiability-based MaxSAT Solving","type":"publication"},{"authors":["Saurabh Joshi","Ruben Martins","Vasco Manquinho"],"categories":null,"content":"","date":1435708800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1435708800,"objectID":"83447e97b4b7488544f55a8909f9d1fa","permalink":"https://sbjoshi.github.io/starter-academic/publication/gte-cp15/","publishdate":"2020-10-15T00:00:00Z","relpermalink":"/starter-academic/publication/gte-cp15/","section":"publication","summary":"This paper describes Generalized Totalizer Encoding (GTE) to encode Pseudo-Boolean Constraints. This encoding led Open-WBO to win accolades in MaxSAT evaluations and Pseudo-Boolean evaluations.","tags":["Constraint Programming"],"title":"Generalized Totalizer Encoding for Pseudo-Boolean Constraints","type":"publication"},{"authors":["Martin Brain","Saurabh Joshi","Daniel Kroening","Peter Schrammel"],"categories":null,"content":"","date":1435708800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1435708800,"objectID":"660c846cef8fef1e77f003e565f07790","permalink":"https://sbjoshi.github.io/starter-academic/publication/kiki-sas15/","publishdate":"2020-10-15T00:00:00Z","relpermalink":"/starter-academic/publication/kiki-sas15/","section":"publication","summary":"This paper describes a sound and complete tool, 2LS,  for program verification and the techniques behind its working.","tags":["Formal Verification","Program Analysis"],"title":"Safety Verification and Refutation by $k$-Invariants and $k$-Induction","type":"publication"},{"authors":["Saurabh Joshi","Daniel Kroening"],"categories":null,"content":"","date":1433116800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1433116800,"objectID":"16689fd18e06244add901b20110c2120","permalink":"https://sbjoshi.github.io/starter-academic/publication/robmc-fm15/","publishdate":"2020-10-15T00:00:00Z","relpermalink":"/starter-academic/publication/robmc-fm15/","section":"publication","summary":"This paper introduces Re-Order Bounded Model Checking to efficiently repair programs on weak memory models.","tags":["Formal Verification","Program Analysis"],"title":"Property-Driven Fence Insertion Using Reorder Bounded Model Checking","type":"publication"},{"authors":["Ruben Martins","Saurabh Joshi","Vasco Manquinho","Ines Lynce"],"categories":null,"content":"","date":1404172800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1404172800,"objectID":"d17d6bb17264a791308b93632bb7a690","permalink":"https://sbjoshi.github.io/starter-academic/publication/inc-cardinality-cp14/","publishdate":"2020-10-15T00:00:00Z","relpermalink":"/starter-academic/publication/inc-cardinality-cp14/","section":"publication","summary":"This paper describes techniques to incremental encode cardinality constraints. This led Open-WBO to win accolades in MaxSAT evaluations.","tags":["Constraint Programming"],"title":"Incremental Cardinality Constraints for MaxSAT","type":"publication"},{"authors":["Saurabh Joshi","Akash Lal"],"categories":null,"content":"","date":1393632000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1393632000,"objectID":"9fa8ebe152671397de3e5b1e3ac16de9","permalink":"https://sbjoshi.github.io/starter-academic/publication/atomicinf-arxiv/","publishdate":"2020-10-16T00:00:00Z","relpermalink":"/starter-academic/publication/atomicinf-arxiv/","section":"publication","summary":"This paper presents a technique for automatically constructing a fix for buggy concurrent programs: given a concurrent program that does not satisfy user-provided assertions, we infer atomic blocks that fix the program. An atomic block protects a piece of code and ensures that it runs without interruption from other threads. Our technique uses a verification tool as a subroutine to find the smallest atomic regions that remove all bugs in a given program. Keeping the atomic regions small allows for maximum concurrency. We have implemented our approach in a tool called AtomicInf. A user of AtomicInf can choose between strong and weak atomicity semantics for the inferred fix. While the former is simpler to find, the latter provides more information about the bugs that got fixed.  We ran AtomicInf on several benchmarks and came up with the smallest and the most precise atomic regions in all of them. We implemented an earlier technique to our setting and observed that AtomicInf is 1.7 times faster on an average as compared to an earlier approach.","tags":["Formal Verification","Automated Program Repair"],"title":"Automatically finding atomic regions for fixing bugs in Concurrent Programs","type":"publication"},{"authors":["Saurabh Joshi","R K Shyamasundar","Sanjeev K Aggarwal"],"categories":null,"content":"","date":1330560000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1330560000,"objectID":"fdfa96c459424c72b406847e192ddb48","permalink":"https://sbjoshi.github.io/starter-academic/publication/mhp-ipdpsw12/","publishdate":"2020-10-16T00:00:00Z","relpermalink":"/starter-academic/publication/mhp-ipdpsw12/","section":"publication","summary":"This paper presents a technique to perform May-Happen-in-Parallel analysis for languages with Dynamic Barriers.","tags":["Program Analysis"],"title":"A New Method of {MHP} Analysis for Languages with Dynamic Barriers","type":"publication"},{"authors":["Saurabh Joshi","Shuvendu Lahiri","Akash Lal"],"categories":null,"content":"","date":1325376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1325376000,"objectID":"716fae8dbf22f940a20d1ca6929e30dc","permalink":"https://sbjoshi.github.io/starter-academic/publication/underspecified-popl12/","publishdate":"2020-10-16T00:00:00Z","relpermalink":"/starter-academic/publication/underspecified-popl12/","section":"publication","summary":"This paper presents a technique to find interleaved bugs even with incomplete harness.","tags":["Formal Verification","Program Analysis"],"title":"Underspecified harnesses and interleaved bugs","type":"publication"},{"authors":["Shivali Agarwal","Saurabh Joshi","R K Shyamasundar"],"categories":null,"content":"","date":1293840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1293840000,"objectID":"2633ec364a17f683d2f8f8015c416de7","permalink":"https://sbjoshi.github.io/starter-academic/publication/icdcn11/","publishdate":"2020-10-10T00:00:00Z","relpermalink":"/starter-academic/publication/icdcn11/","section":"publication","summary":"Static assertion checking of open programs requires setting up a precise harness to capture the environment assumptions. For instance, a library may require a file handle to be properly initialized before it is passed into it. A harness is used to set up or specify the appropriate preconditions before invoking methods from the program. In the absence of a precise harness, even the most precise automated static checkers are bound to report numerous false alarms. This often limits the adoption of static assertion checking in the hands of a user.  In this work, we explore the possibility of automatically filtering away (or prioritizing) warnings that result from imprecision in the harness. We limit our attention to the scenario when one is interested in finding bugs due to concurrency. We define a warning to be an interleaved bug when it manifests on an input for which no sequential interleaving produces a warning. As we argue in the paper, limiting a static analysis to only consider interleaved bugs greatly reduces false positives during static concurrency analysis in the presence of an imprecise harness.  We formalize interleaved bugs as a differential analysis between the original program and its sequential version and provide various techniques for finding them. Our implementation CBugs demonstrates that the scheme of finding interleaved bugs can alleviate the need to construct precise harnesses while checking real-life concurrent programs.","tags":["Program Analysis"],"title":"Distributed Generalized Dynamic Barrier Synchronization","type":"publication"},{"authors":["Frederic Doucet","R K Shyamasundar","Ingolf Krueger","Saurabh Joshi","Rajesh K Gupta"],"categories":null,"content":"","date":1191196800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1191196800,"objectID":"2da4877f4cae746c7fce316515f92755","permalink":"https://sbjoshi.github.io/starter-academic/publication/hvc07/","publishdate":"2020-10-16T00:00:00Z","relpermalink":"/starter-academic/publication/hvc07/","section":"publication","summary":"SystemC is a popular language used in modeling system-on-chip implementations. To support this task at a high level of abstraction, transaction-level modeling (TLM) libraries have been recently developped. While TLM libraries are useful, it is difficult to capture the reactive nature of certain transactions with the constructs currently available in the SystemC and TLM libraries. In this paper, we propose an approach to specify and verify reactive transactions in SystemC designs. Reactive transactions are different from TLM transactions in the sense that a transaction can be killed or reset. Our approach consists of: (1) a language to describe reactive transactions that can be translated to verification monitors, (2) an architectural pattern to implement reactive transactions, and (3) the verification support to verify that the design does not deadlock, allows only legal behaviors and is always responsive. We illustrate our approach through an example of a transactional memory system where a transaction can be killed or reset before its completion. We identify the architectural patterns for reactive transactions. Our results demonstrate the feasibility of our approach as well as support for a comprehensive verification using RuleBase/NuSMV tools.","tags":["Formal Verification"],"title":"Reactivity in SystemC Transaction-Level Models","type":"publication"}]